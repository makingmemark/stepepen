import type { ActorArgs } from 'excalibur';
import { Actor } from 'excalibur';
export interface TransitionArgs extends ActorArgs {
    duration?: number | {
        outro: number;
        intro: number;
    };
    easing?: (t: number) => number;
    /**
     * Carries the outro state of the transition to the loading scene. Be wary
     * of the z-indexes you use, as the transition might overlay (or get overlayed by) the loading scene
     * entities.
     *
     * If a number is provided, it will only persist for that length of time in ms before introing
     * to the loading scene. It will outro when loading scene completes and intro again
     * on the following scene.
     */
    persistOnLoading?: boolean | number;
}
export declare class Transition extends Actor {
    duration: {
        outro: number;
        intro: number;
    };
    easing: (t: number) => number;
    persistOnLoading: boolean | number;
    isOutro: boolean;
    progress: number;
    started: boolean;
    constructor({ duration, easing, ...args }?: TransitionArgs);
    private getDuration;
    onIntroStart(): void;
    onIntro(progress: number): void;
    onIntroComplete(): void;
    onOutroStart(): void;
    onOutro(progress: number): void;
    onOutroComplete(): void;
    execute(isOutro?: boolean, progress?: number): Promise<unknown>;
}
