import type { Scene } from 'excalibur';
import { Class } from 'excalibur';
import type { Transition } from './transitions/Transition.js';
export interface RouterArgs<Routes extends Record<string, Route>, Loaders extends Record<string, typeof Scene>> {
    routes: Routes;
    loaders?: Loaders;
}
declare type Route = typeof Scene | (() => Promise<{
    default: typeof Scene;
}>) | (() => Promise<typeof Scene>);
export declare class Router<Routes extends Record<string, Route>, Loaders extends Record<string, typeof Scene>> extends Class {
    engine: ex.Engine;
    routes: Routes;
    isTransitioning: boolean;
    isBooting: boolean;
    private resourceLoader;
    private loaders;
    private lastGoto;
    constructor(args: RouterArgs<Routes, Loaders>);
    get location(): {
        name: keyof Routes;
        scene: Scene<unknown>;
        data?: any;
    };
    start(engine: ex.Engine): Promise<void>;
    addRoute(name: string, route: Route): void;
    removeRoute(name: string): void;
    goto<Data = any>(name: Extract<keyof Routes, string>, options?: {
        data?: Data;
        loader?: Extract<keyof Loaders, string>;
        transition?: Transition;
        onActivate?: (scene: Scene) => void;
    }): Promise<Scene<unknown>>;
    /**
     * Starts loading all files and assets required for the scene
     */
    preloadScene(name: string): Promise<Scene<unknown>>;
    private loadScene;
    addResource(loadable: ex.Loadable<any> | ex.Loadable<any>[]): void;
    /**
     * Restarts the current scene. Scene will re-use activation data
     * unless provided.
     */
    restartScene<Data = any>(options?: {
        data?: Data;
        loader?: Extract<keyof Loaders, string>;
        transition?: Transition;
    }): Promise<void>;
    private sceneNeedsLoading;
    private executeTransition;
}
export {};
